{
  "hash": "28f5c56675b1594e2046800483927398",
  "result": {
    "markdown": "# Performance tests\n\n## 10\n\n\n\n```{sql}\n#| eval: false\n\n\n```\n\n\n\n\n\n## 50\n\n\n\n```{sql}\n#| eval: false\n\n\n```\n\n\n\n\n\n## 100\n\n\n\n\n```{sql}\n#| eval: false\n\n\n```\n\n\n\n\n\n## 200\n\n\n\n\n```{sql}\n#| eval: false\n---- Create 200 origin\nCREATE TABLE sampling_weight_200_origin  AS\nwith porto_200_origin AS (\n        SELECT\n            * \n        FROM \n            od_2728_snapped_origin \n        ORDER BY random() LIMIT 200)\n        SELECT * FROM  porto_200_origin;  \n---- Create 200 destination\nCREATE TABLE sampling_weight_200_destination  AS\nwith porto_200_destination AS (\n        SELECT\n            * \n        FROM \n            od_2728_snapped_origin \n        ORDER BY random() LIMIT 200)\n        SELECT * FROM  porto_200_destination;  \n---- Create index for origin\nCREATE INDEX idx_sampling_weight_200_origin_net_id ON sampling_weight_200_origin USING hash(net_id);\nCREATE INDEX idx_sampling_weight_200_origin_geom ON sampling_weight_200_origin USING gist(the_geom);\n---- Create index for destination\nCREATE INDEX idx_sampling_weight_200_destination_net_id ON sampling_weight_200_destination USING hash(net_id);\nCREATE INDEX idx_sampling_weight_200_destination_geom ON sampling_weight_200_destination USING gist(the_geom);\n---- Cluster\nCLUSTER porto_alegre_net_largest USING idx_porto_alegre_net_largest_geom;\n---- Vacuum clean\nVACUUM(full, ANALYZE) sampling_weight_200_origin;\nVACUUM(full, ANALYZE) sampling_weight_200_destination;\nVACUUM(full, ANALYZE) porto_alegre_net_largest;\n--- Run query\n\nEXPLAIN ANALYZE\n CREATE TABLE centrality_200_200_porto AS\n SELECT   b.ogc_fid,\n b.the_geom,\n count(the_geom) as centrality \n FROM  pgr_dijkstra('SELECT  ogc_fid AS id,\n\t\t\t\t\t\t\t  fromid AS source,\n\t\t\t\t\t\t\ttoid AS target,\n\t\t\t\t\t\t\tweight AS cost\n\t\t\t\t      FROM porto_alegre_net_largest',\n\t\t\t\t      ARRAY(SELECT net_id AS start_id FROM porto_200_origin  ),\n\t\t\t\t      ARRAY(SELECT net_id AS end_id FROM porto_200_destination ),\n\t\t\t\t      directed := TRUE) j\n\t\t\t\t      left JOIN porto_alegre_net_largest AS b\n\t\t\t\t      ON j.edge = b.ogc_fid\n\t\t\t\t      GROUP BY  b.ogc_fid, b.the_geom\n\t\t\t\t      ORDER BY centrality DESC;  \n```\n\n\n\n\n## 300 \n\n\n\n\n```{sql}\n#| eval:  false\n\n\n---- 300\n\n---- Create 300 origin\nCREATE TABLE sampling_weight_300_origin  AS\nwith porto_300_origin AS (\n        SELECT\n            * \n        FROM \n            od_2728_snapped_origin \n        ORDER BY random() LIMIT 300)\n        SELECT * FROM  porto_300_origin;  \n---- Create 300 destination\nCREATE TABLE sampling_weight_300_destination  AS\nwith porto_300_destination AS (\n        SELECT\n            * \n        FROM \n            od_2728_snapped_origin \n        ORDER BY random() LIMIT 300)\n        SELECT * FROM  porto_300_destination;  \n---- Create index for origin\nCREATE INDEX idx_sampling_weight_300_origin_net_id ON sampling_weight_300_origin USING hash(net_id);\nCREATE INDEX idx_sampling_weight_300_origin_geom ON sampling_weight_300_origin USING gist(the_geom);\n---- Create index for destination\nCREATE INDEX idx_sampling_weight_300_destination_net_id ON sampling_weight_300_destination USING hash(net_id);\nCREATE INDEX idx_sampling_weight_300_destination_geom ON sampling_weight_300_destination USING gist(the_geom);\n---- Cluster\nCLUSTER porto_alegre_net_largest USING idx_porto_alegre_net_largest_geom;\n---- Vacuum clean\nVACUUM(full, ANALYZE) sampling_weight_300_origin;\nVACUUM(full, ANALYZE) sampling_weight_300_destination;\nVACUUM(full, ANALYZE) porto_alegre_net_largest;\n--- Run query\n\n EXPLAIN ANALYZE\n CREATE TABLE centrality_300_300_porto AS\n SELECT   b.ogc_fid,\n b.the_geom,\n count(the_geom) as centrality \n FROM  pgr_dijkstra('SELECT  ogc_fid AS id,\n\t\t\t\t\t\t\t  fromid AS source,\n\t\t\t\t\t\t\ttoid AS target,\n\t\t\t\t\t\t\tweight AS cost\n\t\t\t\t      FROM porto_alegre_net_largest',\n\t\t\t\t      ARRAY(SELECT net_id AS start_id FROM sampling_weight_300_origin  ),\n\t\t\t\t      ARRAY(SELECT net_id AS end_id FROM sampling_weight_300_destination ),\n\t\t\t\t      directed := TRUE) j\n\t\t\t\t      left JOIN porto_alegre_net_largest AS b\n\t\t\t\t      ON j.edge = b.ogc_fid\n\t\t\t\t      GROUP BY  b.ogc_fid, b.the_geom\n\t\t\t\t      ORDER BY centrality DESC;  \n\t\t\t\t      \n--- check max centrality\t\t\t\t     \nSELECT max(centrality) FROM centrality_300_300_porto ;\n--- check max rows\nSELECT  count(*) FROM centrality_10_10_porto;\n```\n\n\n\n\n\n## Method array_agg()\n\n\n\n\n```{sql}\n#| eval: false\n\n\n---- create origin_destination\nCREATE TEMP TABLE vertices_lookup_10\nAS             \nWITH all_pairs AS (\n  SELECT f.net_id AS fid, f.the_geom AS fgeom,\n         t.net_id AS tid, t.the_geom AS tgeom\n    FROM random_10_origin AS f,\n         random_10_destination AS t\n),\nvertices AS (\n  SELECT fid, tid,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> fgeom\n       LIMIT 1) AS fv,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> tgeom\n       LIMIT 1) AS tv\n  FROM all_pairs\n)\nSELECT * FROM vertices;\n---- Number of OD\nSELECT count(*) FROM vertices_lookup_10;\n---- Create index\nCREATE INDEX idx_vertices_lookup_10_fid ON vertices_lookup_10 USING hash(fid);\nCREATE INDEX idx_vertices_lookup_10_tid ON vertices_lookup_10 USING hash(tid);\nCREATE INDEX idx_vertices_lookup_10_fv ON vertices_lookup_10 USING hash(fv);\nCREATE INDEX idx_vertices_lookup_10_tv ON vertices_lookup_10 USING hash(tv);\n---- Vacuum and clean\nVACUUM(full, ANALYZE) vertices_lookup_10;\nVACUUM(full, ANALYZE) porto_alegre_net_largest;\n---- Run query using array_agg()\nEXPLAIN ANALYZE\nCREATE TABLE porto_100_dijkstra_agg AS\nWITH pgr_result AS (\n  SELECT pgr_dijkstra('SELECT ogc_fid AS id,\n\t         fromid AS source,\n\t\t\ttoid AS target,\n\t\t\t weight AS cost FROM porto_alegre_net_largest',\n    array_agg(fv), array_agg(tv), \n    directed := true\n  ) FROM vertices_lookup_10 \n) \nSELECT \n b.ogc_fid,\n b.the_geom,\n count(the_geom) as centrality \nFROM pgr_result\nLEFT JOIN porto_alegre_net_largest AS b\nON (pgr_dijkstra).edge = b.ogc_fid\nGROUP BY \n\tthe_geom, b.ogc_fid\nORDER BY \n\tcentrality DESC;\n---- Max centrality value\nselect max(centrality) FROM porto_100_dijkstra_agg ;\n---- Number of rows\nselect count(*) FROM porto_100_dijkstra_agg ;\n```\n\n\n\n\n## pgr_astrar()\n\n\n\n\n```{sql}\n#| eval: false\n\nSELECT * FROM random_10_origin ro ;\n \nCREATE TABLE porto_alegre_net_largest_astar AS\t\t    \nWITH porto_alegre_net_astart AS (\nSELECT \n*,\nst_startpoint(the_geom) AS start_pt,\nst_endpoint(the_geom) AS end_pt\nFROM porto_alegre_net_largest AS net)\nSELECT *,\n\tst_x(start_pt) AS x1,\n\tst_y(start_pt) AS y1,\n\tst_x(end_pt) AS x2,\n\tst_y(end_pt) AS y2\nFROM porto_alegre_net_astart;\n---- adding spatial index\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_the_geom ON porto_alegre_net_largest_astar  USING gist(the_geom);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_start ON porto_alegre_net_largest_astar  USING gist(start_pt);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_end ON porto_alegre_net_largest_astar USING gist(end_pt);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_x1 ON porto_alegre_net_largest_astar  USING btree(x1);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_y1 ON porto_alegre_net_largest_astar USING btree(y1);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_x2 ON porto_alegre_net_largest_astar USING btree(x2);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_y2 ON porto_alegre_net_largest_astar USING btree(y2);                      \n----- RUnning the query\nEXPLAIN ANALYZE\nCREATE TABLE centrality_10_10_porto_astrar AS\nSELECT  \n\tb.ogc_fid,\n\t b.the_geom,\n \tcount(the_geom) as centrality \nFROM pgr_astar(\n\t'SELECT ogc_fid AS id,\n\t\t\tfromid AS source,\n\t\t\ttoid AS target,\n\t\t\tweight AS cost,\n\t\t\tx1,\n\t\t\ty1,\n\t\t\tx2,\n\t\t\ty2\n\tFROM porto_alegre_net_largest_astar',\n\tARRAY(SELECT net_id FROM  random_10_origin),\n\tARRAY(SELECT net_id FROM  random_10_destination),\n\t\t     directed:=TRUE,\n\t\t     heuristic:=2) j\n                      left JOIN porto_alegre_net_largest_astar AS b\n                      ON j.edge = b.ogc_fid\n                      GROUP BY  b.ogc_fid, b.the_geom\n                      ORDER BY centrality DESC;  \n\n--- check max centrality                     \nSELECT max(centrality) FROM centrality_10_10_porto_astrar ;\n--- check max rows\nSELECT  count(*) FROM centrality_10_10_porto_astrar;\n```\n\n",
    "supporting": [
      "appendix_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
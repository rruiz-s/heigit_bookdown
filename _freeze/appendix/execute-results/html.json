{
  "hash": "5956ad495a12b3a19e09ecb5c2957e48",
  "result": {
    "markdown": "# Performance \n\nPoner aqui el problema\n\n## Data\n### Direct: Download files\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-ba50f648bc61959013cc\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ba50f648bc61959013cc\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"],[\"porto_alegre_net_largest\",\"porto_200_origin\",\"porto_200_destination\",\"porto_alegre_net_pre_component_one_star\",\"weight_sampling_200_origin\",\"weight_sampling_200_destination\",\"random_10_origin\",\"random_10_destination\",\"porto_alegre_net_largest_vertices_pgr\",\"porto_alegre_net_astart\"],[\"naive\",\"naive\",\"naive\",\"bbox\",\"bbox\",\"bbox\",\"array\",\"array\",\"array\",\"array\"],[\"<a href=\\\\”https://drive.google.com/file/d/1nRCenmBSpzRQzSixjWQqIBeqeLpR4LdO/view?usp=sharing”>download<\\/a>\",\"n\",\"n\",\"<a href=\\\\”https://drive.google.com/file/d/1nRCenmBSpzRQzSixjWQqIBeqeLpR4LdO/view?usp=sharing ”>download<\\/a>\",\"<a href=\\\\”https://drive.google.com/file/d/1dBB_VXPapG8AVMjpimb8ZxxltL_fF4it/view?usp=sharing”>download<\\/a>\",\"<a href=\\\\”https://drive.google.com/file/d/1-Hdt9_cgGuyFcqcV8kcQlNOBuQPzPPTr/view?usp=sharing”>download<\\/a>\",\"<a href=\\\\”https://drive.google.com/file/d/1-Hdt9_cgGuyFcqcV8kcQlNOBuQPzPPTr/view?usp=sharing”>download<\\/a>\",\"<a href=\\\\”https://drive.google.com/file/d/1-Hdt9_cgGuyFcqcV8kcQlNOBuQPzPPTr/view?usp=sharing”>download<\\/a>\",\"<a href=\\\\”https://drive.google.com/file/d/1-Hdt9_cgGuyFcqcV8kcQlNOBuQPzPPTr/view?usp=sharing>download<\\/a>\",\"n\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>file<\\/th>\\n      <th>section<\\/th>\\n      <th>url<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"file\",\"targets\":1},{\"name\":\"section\",\"targets\":2},{\"name\":\"url\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n### Indirect: Build from queries\n\n**Origin-Destination matrix**\n\n\n::: {.cell}\n\n```{.sql .cell-code  code-summary=\"Create OD matrix weighted sampling\"}\n\n---- Create 200 origin\nCREATE TABLE sampling_weight_200_origin  AS\nwith porto_200_origin AS (\n        SELECT\n            * \n        FROM \n            od_2728_snapped_origin \n        ORDER BY random() LIMIT 200)\n        SELECT * FROM  porto_200_origin;  \n---- Create 200 destination\nCREATE TABLE sampling_weight_200_destination  AS\nwith porto_200_destination AS (\n        SELECT\n            * \n        FROM \n            od_2728_snapped_origin \n        ORDER BY random() LIMIT 200)\n        SELECT * FROM  porto_200_destination;  \n```\n:::\n\n\n**Creating table with x,y for pgr_astar()**\n\n\n::: {.cell}\n\n```{.sql .cell-code  code-summary=\"Create network table with x,y for pgr_astar()\"}\nCREATE TABLE porto_alegre_net_largest_astar AS\t\t    \nWITH porto_alegre_net_astart AS (\nSELECT \n  *,\n  st_startpoint(the_geom) AS start_pt,\n  st_endpoint(the_geom) AS enstart_pt\nFROM \n  porto_alegre_net_largest AS net)\nSELECT *,\n\tst_x(start_pt) AS x1,\n\tst_y(start_pt) AS y1,\n\tst_x(end_pt) AS x2,\n\tst_y(end_pt) AS y2\nFROM \n  porto_alegre_net_astart;\n```\n:::\n\n\n\n**Applying spatial index**\n\n\n::: {.cell}\n\n```{.sql .cell-code  code-summary=\"Applying index to weighted OD matrix\"}\n---- Create index for origin\nCREATE INDEX idx_sampling_weight_200_origin_net_id ON sampling_weight_200_origin USING hash(net_id);\nCREATE INDEX idx_sampling_weight_200_origin_geom ON sampling_weight_200_origin USING gist(the_geom);\n---- Create index for destination\nCREATE INDEX idx_sampling_weight_200_destination_net_id ON sampling_weight_200_destination USING hash(net_id);\nCREATE INDEX idx_sampling_weight_200_destination_geom ON sampling_weight_200_destination USING gist(the_geom);\n---- Cluster\nCLUSTER porto_alegre_net_largest USING idx_porto_alegre_net_largest_geom;\n---- Vacuum clean\nVACUUM(full, ANALYZE) sampling_weight_200_origin;\nVACUUM(full, ANALYZE) sampling_weight_200_destination;\nVACUUM(full, ANALYZE) porto_alegre_net_largest;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code  code-summary=\"Create OD matrix regular sampling for agg_array()\"}\n---- create origin_destination\nCREATE TEMP TABLE vertices_lookup_10\nAS             \nWITH all_pairs AS (\n  SELECT f.net_id AS fid, f.the_geom AS fgeom,\n         t.net_id AS tid, t.the_geom AS tgeom\n    FROM random_10_origin AS f,\n         random_10_destination AS t\n),\nvertices AS (\n  SELECT fid, tid,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> fgeom\n       LIMIT 1) AS fv,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> tgeom\n       LIMIT 1) AS tv\n  FROM all_pairs\n)\nSELECT * FROM vertices;\n---- Number of OD\nSELECT count(*) FROM vertices_lookup_10;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code  code-summary=\"Applying index to network for astrar()\"}\n---- adding spatial index\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_the_geom ON porto_alegre_net_largest_astar  USING gist(the_geom);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_start ON porto_alegre_net_largest_astar  USING gist(start_pt);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_end ON porto_alegre_net_largest_astar USING gist(end_pt);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_x1 ON porto_alegre_net_largest_astar  USING btree(x1);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_y1 ON porto_alegre_net_largest_astar USING btree(y1);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_x2 ON porto_alegre_net_largest_astar USING btree(x2);\nCREATE INDEX idx_porto_alegre_net_largest_astar_net_y2 ON porto_alegre_net_largest_astar USING btree(y2);                      \n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code  code-summary=\"Applying index on vertices_lookup\"}\n---- Create index\nCREATE INDEX idx_vertices_lookup_10_fid ON vertices_lookup_10 USING hash(fid);\nCREATE INDEX idx_vertices_lookup_10_tid ON vertices_lookup_10 USING hash(tid);\nCREATE INDEX idx_vertices_lookup_10_fv ON vertices_lookup_10 USING hash(fv);\nCREATE INDEX idx_vertices_lookup_10_tv ON vertices_lookup_10 USING hash(tv);\n---- Vacuum and clean\nVACUUM(full, ANALYZE) vertices_lookup_10;\nVACUUM(full, ANALYZE) porto_alegre_net_largest;\n```\n:::\n\n\n## Routing\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] TRUE\n\n[[2]]\n[1] TRUE\n\n[[3]]\n[1] TRUE\n\n[[4]]\n[1] TRUE\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-5a3f9a13ad0188b0068b\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5a3f9a13ad0188b0068b\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"Buttons\",\"RowGroup\"],\"caption\":\"<caption>Data description<\\/caption>\",\"data\":[[100,10,50,200,300,10,50,100,200,300,10,50,100,200,10,50,100,200,300,10,50,100,200,100,100,200,300,100,200,300,200],[\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_bdDijkstra()\",\"pgr_bdDijkstra()\",\"pgr_bdDijkstra()\",\"pgr_bdDijkstra()\",\"pgr_astrar()\",\"pgr_astrar()\",\"pgr_astrar()\",\"pgr_astrar()\",\"pgr_astrar()\",\"pgr_bdastrar()\",\"pgr_bdastrar()\",\"pgr_bdastrar()\",\"pgr_bdastrar()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_dijkstra()\",\"pgr_astrar()\",\"pgr_astrar()\",\"pgr_astrar()\",\"pgr_dijkstra()\"],[11183.865,620.371,3691.958,34613.245,75505.38800000001,669.418,4049.986,14119.302,98562.842,423159.514,1451.953,26234.063,108916.104,426489.553,770.139,4390.494,12319.547,38444.056,89211.976,1667.918,27935.192,110424.801,430940.623,13944.047,14212.059,64398.838,136039.719,23319.509,82160.56600000001,183715.6,79274.083],[\"EXPLAIN ANALYZE CREATE TABLE centrality_100_100_porto as  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality FROM  pgr_dijkstra('SELECT         ogc_fid AS id,        fromid AS source,       toid AS target,        weight AS cost      FROM porto_alegre_net_largest',       ARRAY(SELECT net_id AS start_id FROM random_100_origin  ),       ARRAY(SELECT net_id AS end_id FROM random_100_destination ),       directed := TRUE) j     left JOIN porto_alegre_net_largest AS b       ON j.edge = b.ogc_fid  GROUP BY  b.ogc_fid, b.the_geom  ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_10_10_porto as  WITH random_10_origin AS( SELECT * FROM random_100_origin  ORDER BY random() LIMIT 10), random_10_destination AS ( SELECT * FROM random_100_destination  ORDER BY random() LIMIT 10) SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality FROM  pgr_dijkstra('SELECT         ogc_fid AS id,        fromid AS source,       toid AS target,        weight AS cost      FROM porto_alegre_net_largest',       ARRAY(SELECT net_id AS start_id FROM random_10_origin  ),       ARRAY(SELECT net_id AS end_id FROM random_10_destination ),       directed := TRUE) j     left JOIN porto_alegre_net_largest AS b       ON j.edge = b.ogc_fid  GROUP BY  b.ogc_fid, b.the_geom  ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_50_50_porto AS SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality FROM  pgr_dijkstra('SELECT         ogc_fid AS id,        fromid AS source,       toid AS target,        weight AS cost      FROM porto_alegre_net_largest',       ARRAY(SELECT net_id AS start_id FROM random_50_origin  ),       ARRAY(SELECT net_id AS end_id FROM random_50_destination ),       directed := TRUE) j     left JOIN porto_alegre_net_largest AS b       ON j.edge = b.ogc_fid  GROUP BY  b.ogc_fid, b.the_geom  ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_200_200_porto AS  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_dijkstra('SELECT  ogc_fid AS id,          fromid AS source,        toid AS target,        weight AS cost           FROM porto_alegre_net_largest',           ARRAY(SELECT net_id AS start_id FROM sampling_weight_200_origin  ),           ARRAY(SELECT net_id AS end_id FROM sampling_weight_200_destination ),           directed := TRUE) j           left JOIN porto_alegre_net_largest AS b           ON j.edge = b.ogc_fid           GROUP BY  b.ogc_fid, b.the_geom           ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_300_300_porto AS  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_dijkstra('SELECT  ogc_fid AS id,          fromid AS source,        toid AS target,        weight AS cost           FROM porto_alegre_net_largest',           ARRAY(SELECT net_id AS start_id FROM sampling_weight_300_origin  ),           ARRAY(SELECT net_id AS end_id FROM sampling_weight_300_destination ),           directed := TRUE) j           left JOIN porto_alegre_net_largest AS b           ON j.edge = b.ogc_fid           GROUP BY  b.ogc_fid, b.the_geom           ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE porto_100_dijkstra_agg AS WITH pgr_result AS (   SELECT pgr_dijkstra('SELECT ogc_fid AS id,           fromid AS source,    toid AS target,     weight AS cost FROM porto_alegre_net_largest',     array_agg(fv), array_agg(tv),      directed := true   ) FROM vertices_lookup_10  )  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality  FROM pgr_result LEFT JOIN porto_alegre_net_largest AS b ON (pgr_dijkstra).edge = b.ogc_fid GROUP BY   the_geom, b.ogc_fid ORDER BY   centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE porto_50_dijkstra_agg AS WITH pgr_result AS (   SELECT pgr_dijkstra('SELECT ogc_fid AS id,           fromid AS source,    toid AS target,     weight AS cost FROM porto_alegre_net_largest',     array_agg(fv), array_agg(tv),      directed := true   ) FROM vertices_lookup_50  )  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality  FROM pgr_result LEFT JOIN porto_alegre_net_largest AS b ON (pgr_dijkstra).edge = b.ogc_fid GROUP BY   the_geom, b.ogc_fid ORDER BY   centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE porto_1000_dijkstra_agg AS WITH pgr_result AS (   SELECT pgr_dijkstra('SELECT ogc_fid AS id,           fromid AS source,    toid AS target,     weight AS cost FROM porto_alegre_net_largest',     array_agg(fv), array_agg(tv),      directed := true   ) FROM vertices_lookup_1000  )  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality  FROM pgr_result LEFT JOIN porto_alegre_net_largest AS b ON (pgr_dijkstra).edge = b.ogc_fid GROUP BY   the_geom, b.ogc_fid ORDER BY   centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE porto_2000_dijkstra_agg AS WITH pgr_result AS (   SELECT pgr_dijkstra('SELECT ogc_fid AS id,           fromid AS source,    toid AS target,     weight AS cost FROM porto_alegre_net_largest',     array_agg(fv), array_agg(tv),      directed := true   ) FROM vertices_lookup_2000  )  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality  FROM pgr_result LEFT JOIN porto_alegre_net_largest AS b ON (pgr_dijkstra).edge = b.ogc_fid GROUP BY   the_geom, b.ogc_fid ORDER BY   centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE porto_3000_dijkstra_agg AS WITH pgr_result AS (   SELECT pgr_dijkstra('SELECT ogc_fid AS id,           fromid AS source,    toid AS target,     weight AS cost FROM porto_alegre_net_largest',     array_agg(fv), array_agg(tv),      directed := true   ) FROM vertices_lookup_3000  )  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality  FROM pgr_result LEFT JOIN porto_alegre_net_largest AS b ON (pgr_dijkstra).edge = b.ogc_fid GROUP BY   the_geom, b.ogc_fid ORDER BY   centrality DESC; ---- Max centrality value select max(centrality) FROM porto_3000_dijkstra_agg ; ---- Number of rows select count(*) FROM porto_3000_dijkstra_agg ;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_10_10_porto_bdijstra AS  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_bdDijkstra('SELECT  ogc_fid AS id,                               fromid AS source,                             toid AS target,                             weight AS cost                       FROM porto_alegre_net_largest',                       ARRAY(SELECT net_id AS start_id FROM random_10_origin),                       ARRAY(SELECT net_id AS end_id FROM random_10_destination),                       directed := TRUE) j                       left JOIN porto_alegre_net_largest AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_50_50_porto_bdijstra AS  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_bdDijkstra('SELECT  ogc_fid AS id,                               fromid AS source,                             toid AS target,                             weight AS cost                       FROM porto_alegre_net_largest',                       ARRAY(SELECT net_id AS start_id FROM random_50_origin),                       ARRAY(SELECT net_id AS end_id FROM random_50_destination),                       directed := TRUE) j                       left JOIN porto_alegre_net_largest AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_100_100_porto_bdijstra AS  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_bdDijkstra('SELECT  ogc_fid AS id,                               fromid AS source,                             toid AS target,                             weight AS cost                       FROM porto_alegre_net_largest',                       ARRAY(SELECT net_id AS start_id FROM random_100_origin),                       ARRAY(SELECT net_id AS end_id FROM random_100_destination),                       directed := TRUE) j                       left JOIN porto_alegre_net_largest AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_200_200_porto_bdijstra AS  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_bdDijkstra('SELECT  ogc_fid AS id,                               fromid AS source,                             toid AS target,                             weight AS cost                       FROM porto_alegre_net_largest',                       ARRAY(SELECT net_id AS start_id FROM sampling_weight_200_origin ),                       ARRAY(SELECT net_id AS end_id FROM sampling_weight_200_destination),                       directed := TRUE) j                       left JOIN porto_alegre_net_largest AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_10_10_porto_astrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_astar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  random_10_origin),  ARRAY(SELECT net_id FROM  random_10_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_50_50_porto_astrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_astar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  random_50_origin),  ARRAY(SELECT net_id FROM  random_50_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_100_100_porto_astrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_astar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  random_100_origin),  ARRAY(SELECT net_id FROM  random_100_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_200_200_porto_astrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_astar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  sampling_weight_200_origin),  ARRAY(SELECT net_id FROM  sampling_weight_200_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_300_300_porto_astrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_astar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  sampling_weight_300_origin),  ARRAY(SELECT net_id FROM  sampling_weight_300_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_10_10_porto_bdastrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_bdAstar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  random_10_origin),  ARRAY(SELECT net_id FROM  random_10_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_50_50_porto_bdastrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_bdAstar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  random_50_origin),  ARRAY(SELECT net_id FROM  random_50_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_100_100_porto_bdastrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_bdAstar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  random_100_origin),  ARRAY(SELECT net_id FROM  random_100_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_200_200_porto_bdastrar AS SELECT    b.ogc_fid,   b.the_geom,   count(the_geom) as centrality  FROM pgr_bdAstar(  'SELECT ogc_fid AS id,    fromid AS source,    toid AS target,    weight AS cost,    x1,    y1,    x2,    y2  FROM porto_alegre_net_largest_astar',  ARRAY(SELECT net_id FROM  sampling_weight_200_origin),  ARRAY(SELECT net_id FROM  sampling_weight_200_destination),        directed:=TRUE,        heuristic:=2) j                       left JOIN porto_alegre_net_largest_astar AS b                       ON j.edge = b.ogc_fid                       GROUP BY  b.ogc_fid, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_100_using_bbox AS  SELECT b.id,        b.the_geom,        COUNT(b.the_geom) AS centrality FROM (     SELECT * FROM pgr_dijkstra(         'SELECT id,                 source,                 target,                 cost          FROM porto_alegre_net_largest          WHERE the_geom && (SELECT box FROM bbox)',  -- Limit the edges to those within the bounding box         ARRAY(SELECT net_id AS start_id FROM weight_sampling_100_origin),         ARRAY(SELECT net_id AS end_id FROM weight_sampling_100_destination),         directed := TRUE     ) ) AS j LEFT JOIN porto_alegre_net_largest AS b     ON j.edge = b.id GROUP BY b.id, b.the_geom ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_100_100_porto AS  SELECT   b.id,  b.the_geom,  count(the_geom) as centrality   FROM  pgr_dijkstra('SELECT  id,                              source,                             target,                             cost                       FROM porto_alegre_net_largest',                       ARRAY(SELECT net_id AS start_id FROM weight_sampling_100_origin  ),                       ARRAY(SELECT net_id AS end_id FROM weight_sampling_100_destination ),                       directed := TRUE) j                       left JOIN porto_alegre_net_largest AS b                       ON j.edge = b.id                       GROUP BY  b.id, b.the_geom                       ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_200_using_bbox AS  SELECT b.id,        b.the_geom,        COUNT(b.the_geom) AS centrality FROM (     SELECT * FROM pgr_dijkstra(         'SELECT id,                 source,                 target,                 cost          FROM porto_alegre_net_largest          WHERE the_geom && (SELECT box FROM bbox)',  -- Limit the edges to those within the bounding box         ARRAY(SELECT net_id AS start_id FROM weight_sampling_1000_origin LIMIT 200),         ARRAY(SELECT net_id AS end_id FROM weight_sampling_1000_destination LIMIT 200),         directed := TRUE     ) ) AS j LEFT JOIN porto_alegre_net_largest AS b     ON j.edge = b.id GROUP BY b.id, b.the_geom ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_300_using_bbox AS  SELECT b.id,        b.the_geom,        COUNT(b.the_geom) AS centrality FROM (     SELECT * FROM pgr_dijkstra(         'SELECT id,                 source,                 target,                 cost          FROM porto_alegre_net_largest          WHERE the_geom && (SELECT box FROM bbox)',  -- Limit the edges to those within the bounding box         ARRAY(SELECT net_id AS start_id FROM weight_sampling_1000_origin LIMIT 300),         ARRAY(SELECT net_id AS end_id FROM weight_sampling_1000_destination LIMIT 300),         directed := TRUE     ) ) AS j LEFT JOIN porto_alegre_net_largest AS b     ON j.edge = b.id GROUP BY b.id, b.the_geom ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE CREATE TABLE centrality_100_100_porto_astrar_bbox AS SELECT b.id, b.the_geom, count(the_geom) as centrality FROM pgr_astar('SELECT id, source, target, cost, x1, y1, x2, y2 FROM porto_alegre_net_pre_component_one_star WHERE the_geom && (SELECT box FROM bbox)', ARRAY(SELECT net_id FROM weight_sampling_100_origin), ARRAY(SELECT net_id FROM weight_sampling_100_destination), directed:=TRUE, heuristic:=2) j LEFT JOIN porto_alegre_net_pre_component_one_star AS b ON j.edge = b.id GROUP BY b.id, b.the_geom ORDER BY centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_200_200_porto_astrar_bbox AS  SELECT      b.id,  b.the_geom,  count(the_geom) as centrality FROM   pgr_astar(     'SELECT id,        source,        target,        cost,        x1,        y1,        x2,        y2      FROM      porto_alegre_net_pre_component_one_star    WHERE the_geom && (SELECT box FROM bbox)',     ARRAY(SELECT net_id FROM weight_sampling_200_origin),     ARRAY(SELECT net_id FROM weight_sampling_200_destination),    directed:=TRUE,    heuristic:=2) j    LEFT JOIN      porto_alegre_net_pre_component_one_star AS b    ON      j.edge = b.id    GROUP BY       b.id,     b.the_geom    ORDER BY      centrality DESC;\",\"EXPLAIN ANALYZE  CREATE TABLE centrality_300_300_porto_astrar_bbox AS  SELECT      b.id,  b.the_geom,  count(the_geom) as centrality FROM   pgr_astar(     'SELECT id,        source,        target,        cost,        x1,        y1,        x2,        y2      FROM      porto_alegre_net_pre_component_one_star    WHERE the_geom && (SELECT box FROM bbox)',     ARRAY(SELECT net_id FROM weight_sampling_300_origin),     ARRAY(SELECT net_id FROM weight_sampling_300_destination),    directed:=TRUE,    heuristic:=2) j    LEFT JOIN      porto_alegre_net_pre_component_one_star AS b    ON      j.edge = b.id    GROUP BY       b.id,     b.the_geom    ORDER BY      centrality DESC;\",\"CREATE TEMP TABLE vertices_lookup_200 AS              WITH all_pairs AS (   SELECT f.net_id AS fid, f.the_geom AS fgeom,          t.net_id AS tid, t.the_geom AS tgeom     FROM weight_sampling_200_origin AS f,          weight_sampling_200_destination AS t ), vertices AS (   SELECT fid, tid,      (SELECT id         FROM porto_alegre_net_largest_vertices_pgr AS way        ORDER BY way.the_geom <-> fgeom        LIMIT 1) AS fv,      (SELECT id         FROM porto_alegre_net_largest_vertices_pgr AS way        ORDER BY way.the_geom <-> tgeom        LIMIT 1) AS tv   FROM all_pairs ) SELECT * FROM vertices; ---- Number of OD SELECT count(*) FROM vertices_lookup_200; ---- Create index CREATE INDEX idx_vertices_lookup_200_fid ON vertices_lookup_200 USING hash(fid); CREATE INDEX idx_vertices_lookup_200_tid ON vertices_lookup_200 USING hash(tid); CREATE INDEX idx_vertices_lookup_200_fv ON vertices_lookup_200 USING hash(fv); CREATE INDEX idx_vertices_lookup_200_tv ON vertices_lookup_200 USING hash(tv); ---- Vacuum and clean VACUUM(full, ANALYZE) vertices_lookup_200; VACUUM(full, ANALYZE) porto_alegre_net_largest; ---- Run query using array_agg() EXPLAIN ANALYZE CREATE TABLE porto_200_dijkstra_agg AS WITH pgr_result AS (   SELECT pgr_dijkstra('SELECT ogc_fid AS id,           fromid AS source,    toid AS target,     weight AS cost FROM porto_alegre_net_largest',     array_agg(fv), array_agg(tv),      directed := true   ) FROM vertices_lookup_200  )  SELECT   b.ogc_fid,  b.the_geom,  count(the_geom) as centrality  FROM pgr_result LEFT JOIN porto_alegre_net_largest AS b ON (pgr_dijkstra).edge = b.ogc_fid GROUP BY   the_geom, b.ogc_fid ORDER BY   centrality DESC;\"],[\"Sort  (cost=3165.08..3167.58 rows=1000 width=64) (actual time=11135.237..11138.781 rows=21673 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2631kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.026..0.057 rows=100 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.011..0.041 rows=100 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=11123.499..11130.252 rows=21673 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 4881kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=4758.712..10019.941 rows=1787766 loops=1)               ->  Function Scan on pgr_dijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=4758.665..5061.741 rows=1787766 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=1787766)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.400 ms Execution Time: 11183.865 ms\",\"Sort  (cost=3163.28..3165.78 rows=1000 width=64) (actual time=607.270..607.810 rows=5303 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 648kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_10_origin  (cost=0.00..1.10 rows=10 width=8) (actual time=0.012..0.015 rows=10 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_10_destination  (cost=0.00..1.10 rows=10 width=8) (actual time=0.006..0.008 rows=10 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=604.275..605.997 rows=5303 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 1233kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=541.408..593.617 rows=18682 loops=1)               ->  Function Scan on pgr_dijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=541.357..543.010 rows=18682 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=18682)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.525 ms Execution Time: 620.371 ms\",\"Sort  (cost=3164.08..3166.58 rows=1000 width=64) (actual time=3663.542..3665.746 rows=15882 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 1749kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_50_origin  (cost=0.00..1.50 rows=50 width=8) (actual time=0.012..0.018 rows=50 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_50_destination  (cost=0.00..1.50 rows=50 width=8) (actual time=0.006..0.011 rows=50 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=3655.387..3660.160 rows=15882 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 3857kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=2138.588..3394.153 rows=434594 loops=1)               ->  Function Scan on pgr_dijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=2138.493..2212.747 rows=434594 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=434594)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.701 ms Execution Time: 3691.958 ms\",\"Sort  (cost=3169.08..3171.58 rows=1000 width=64) (actual time=34499.671..34505.139 rows=28983 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3259kB   InitPlan 1 (returns $0)     ->  Seq Scan on sampling_weight_200_origin  (cost=0.00..4.00 rows=200 width=8) (actual time=0.102..0.201 rows=200 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on sampling_weight_200_destination  (cost=0.00..4.00 rows=200 width=8) (actual time=0.022..0.125 rows=200 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=34483.930..34492.477 rows=28983 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 6673kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=12543.026..30546.777 rows=7071064 loops=1)               ->  Function Scan on pgr_dijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=12542.991..13541.139 rows=7071064 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=7071064)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.585 ms Execution Time: 34613.245 ms\",\"Sort  (cost=3173.08..3175.58 rows=1000 width=64) (actual time=75239.661..75244.805 rows=32000 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3518kB   InitPlan 1 (returns $0)     ->  Seq Scan on sampling_weight_300_origin  (cost=0.00..6.00 rows=300 width=8) (actual time=0.012..0.053 rows=300 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on sampling_weight_300_destination  (cost=0.00..6.00 rows=300 width=8) (actual time=0.007..0.047 rows=300 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=75223.073..75232.395 rows=32000 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 6673kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=24895.475..66373.230 rows=15922899 loops=1)               ->  Function Scan on pgr_dijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=24894.983..27429.005 rows=15922899 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=15922899)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.639 ms Execution Time: 75505.388 ms\",\"Sort  (cost=3178.60..3181.10 rows=1000 width=64) (actual time=659.139..659.729 rows=5303 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 648kB   CTE pgr_result     ->  ProjectSet  (cost=2.50..7.77 rows=1000 width=32) (actual time=588.537..600.065 rows=18682 loops=1)           ->  Aggregate  (cost=2.50..2.51 rows=1 width=64) (actual time=0.143..0.145 rows=1 loops=1)                 ->  Seq Scan on vertices_lookup_10  (cost=0.00..2.00 rows=100 width=16) (actual time=0.024..0.051 rows=100 loops=1)   ->  HashAggregate  (cost=3111.00..3121.00 rows=1000 width=64) (actual time=656.540..658.069 rows=5303 loops=1)         Group Key: b.the_geom, b.ogc_fid         Batches: 1  Memory Usage: 1233kB         ->  Nested Loop Left Join  (cost=0.42..3103.50 rows=1000 width=56) (actual time=588.574..646.726 rows=18682 loops=1)               ->  CTE Scan on pgr_result  (cost=0.00..20.00 rows=1000 width=32) (actual time=588.542..604.002 rows=18682 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=18682)                     Index Cond: (ogc_fid = (pgr_result.pgr_dijkstra).edge) Planning Time: 0.375 ms Execution Time: 673.767 ms\",\"Sort  (cost=3232.60..3235.10 rows=1000 width=64) (actual time=3738.459..3740.620 rows=15882 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 1749kB   CTE pgr_result     ->  ProjectSet  (cost=56.51..61.77 rows=1000 width=32) (actual time=1977.022..2277.718 rows=434594 loops=1)           ->  Aggregate  (cost=56.51..56.52 rows=1 width=64) (actual time=1.299..1.300 rows=1 loops=1)                 ->  Seq Scan on vertices_lookup_50  (cost=0.00..44.00 rows=2500 width=16) (actual time=0.017..0.460 rows=2500 loops=1)   ->  HashAggregate  (cost=3111.00..3121.00 rows=1000 width=64) (actual time=3731.066..3735.396 rows=15882 loops=1)         Group Key: b.the_geom, b.ogc_fid         Batches: 1  Memory Usage: 3857kB         ->  Nested Loop Left Join  (cost=0.42..3103.50 rows=1000 width=56) (actual time=1977.104..3478.507 rows=434594 loops=1)               ->  CTE Scan on pgr_result  (cost=0.00..20.00 rows=1000 width=32) (actual time=1977.026..2418.230 rows=434594 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=434594)                     Index Cond: (ogc_fid = (pgr_result.pgr_dijkstra).edge) Planning Time: 0.497 ms Execution Time: 3768.760 ms\",\"Sort  (cost=3400.10..3402.60 rows=1000 width=64) (actual time=14063.341..14066.917 rows=21673 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2631kB   CTE pgr_result     ->  ProjectSet  (cost=224.00..229.27 rows=1000 width=32) (actual time=6812.618..8043.894 rows=1787766 loops=1)           ->  Aggregate  (cost=224.00..224.01 rows=1 width=64) (actual time=4.849..4.851 rows=1 loops=1)                 ->  Seq Scan on vertices_lookup_1000  (cost=0.00..174.00 rows=10000 width=16) (actual time=0.015..1.660 rows=10000 loops=1)   ->  HashAggregate  (cost=3111.00..3121.00 rows=1000 width=64) (actual time=14050.762..14057.897 rows=21673 loops=1)         Group Key: b.the_geom, b.ogc_fid         Batches: 1  Memory Usage: 4881kB         ->  Nested Loop Left Join  (cost=0.42..3103.50 rows=1000 width=56) (actual time=6812.688..13001.011 rows=1787766 loops=1)               ->  CTE Scan on pgr_result  (cost=0.00..20.00 rows=1000 width=32) (actual time=6812.622..8637.573 rows=1787766 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=1787766)                     Index Cond: (ogc_fid = (pgr_result.pgr_dijkstra).edge) Planning Time: 0.591 ms Execution Time: 14119.302 ms\",\"Sort  (cost=4071.10..4073.60 rows=1000 width=64) (actual time=98414.879..98419.562 rows=28983 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3259kB   CTE pgr_result     ->  ProjectSet  (cost=895.00..900.27 rows=1000 width=32) (actual time=67746.551..72936.996 rows=7071064 loops=1)           ->  Aggregate  (cost=895.00..895.01 rows=1 width=64) (actual time=13.780..13.782 rows=1 loops=1)                 ->  Seq Scan on vertices_lookup_2000  (cost=0.00..695.00 rows=40000 width=16) (actual time=0.013..4.973 rows=40000 loops=1)   ->  HashAggregate  (cost=3111.00..3121.00 rows=1000 width=64) (actual time=98399.292..98408.264 rows=28983 loops=1)         Group Key: b.the_geom, b.ogc_fid         Batches: 1  Memory Usage: 6673kB         ->  Nested Loop Left Join  (cost=0.42..3103.50 rows=1000 width=56) (actual time=67746.619..93938.097 rows=7071064 loops=1)               ->  CTE Scan on pgr_result  (cost=0.00..20.00 rows=1000 width=32) (actual time=67746.554..75501.177 rows=7071064 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=7071064)                     Index Cond: (ogc_fid = (pgr_result.pgr_dijkstra).edge) Planning Time: 0.530 ms Execution Time: 98562.842 ms\",\"Sort  (cost=5188.10..5190.60 rows=1000 width=64) (actual time=422921.475..422927.188 rows=32000 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3518kB   CTE pgr_result     ->  ProjectSet  (cost=2012.01..2017.27 rows=1000 width=32) (actual time=354831.316..366828.692 rows=15922899 loops=1)           ->  Aggregate  (cost=2012.01..2012.02 rows=1 width=64) (actual time=26.448..26.450 rows=1 loops=1)                 ->  Seq Scan on vertices_lookup_3000  (cost=0.00..1562.00 rows=90000 width=16) (actual time=0.011..9.214 rows=90000 loops=1)   ->  HashAggregate  (cost=3111.00..3121.00 rows=1000 width=64) (actual time=422902.478..422913.399 rows=32000 loops=1)         Group Key: b.the_geom, b.ogc_fid         Batches: 1  Memory Usage: 6673kB         ->  Nested Loop Left Join  (cost=0.42..3103.50 rows=1000 width=56) (actual time=354831.941..413307.473 rows=15922899 loops=1)               ->  CTE Scan on pgr_result  (cost=0.00..20.00 rows=1000 width=32) (actual time=354831.319..372584.390 rows=15922899 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=15922899)                     Index Cond: (ogc_fid = (pgr_result.pgr_dijkstra).edge) Planning Time: 0.473 ms Execution Time: 423159.514 ms\",\"Sort  (cost=3163.28..3165.78 rows=1000 width=64) (actual time=1433.166..1433.511 rows=5303 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 648kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_10_origin  (cost=0.00..1.10 rows=10 width=8) (actual time=0.007..0.009 rows=10 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_10_destination  (cost=0.00..1.10 rows=10 width=8) (actual time=0.004..0.007 rows=10 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=1430.967..1432.186 rows=5303 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 1233kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=1369.162..1420.553 rows=18682 loops=1)               ->  Function Scan on pgr_bddijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=1369.121..1370.717 rows=18682 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=18682)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.255 ms Execution Time: 1451.953 ms\",\"Sort  (cost=3164.08..3166.58 rows=1000 width=64) (actual time=26199.356..26201.586 rows=15914 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 1752kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_50_origin  (cost=0.00..1.50 rows=50 width=8) (actual time=0.014..0.026 rows=50 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_50_destination  (cost=0.00..1.50 rows=50 width=8) (actual time=0.007..0.018 rows=50 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=26191.079..26195.836 rows=15914 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 3857kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=24833.815..25957.779 rows=435534 loops=1)               ->  Function Scan on pgr_bddijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=24833.767..24896.623 rows=435534 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=435534)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.348 ms Execution Time: 26234.063 ms\",\"Sort  (cost=3165.08..3167.58 rows=1000 width=64) (actual time=108861.513..108864.956 rows=21888 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2649kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.011..0.023 rows=100 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.006..0.018 rows=100 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=108848.834..108855.812 rows=21888 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 4881kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=102499.589..107760.597 rows=1791360 loops=1)               ->  Function Scan on pgr_bddijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=102499.524..102794.220 rows=1791360 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=1791360)                     Index Cond: (ogc_fid = j.edge) Planning Time: 0.343 ms Execution Time: 108916.104 ms\",\"Sort  (cost=3169.08..3171.58 rows=1000 width=64) (actual time=426276.331..426280.991 rows=29479 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3302kB   InitPlan 1 (returns $0)     ->  Seq Scan on sampling_weight_200_origin  (cost=0.00..4.00 rows=200 width=8) (actual time=0.193..0.254 rows=200 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on sampling_weight_200_destination  (cost=0.00..4.00 rows=200 width=8) (actual time=0.150..0.206 rows=200 loops=1)   ->  HashAggregate  (cost=3101.25..3111.25 rows=1000 width=64) (actual time=426258.127..426268.264 rows=29479 loops=1)         Group Key: b.ogc_fid, b.the_geom         Batches: 1  Memory Usage: 6673kB         ->  Nested Loop Left Join  (cost=0.67..3093.75 rows=1000 width=56) (actual time=401173.398..421886.410 rows=7085087 loops=1)               ->  Function Scan on pgr_bddijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=401172.910..402370.334 rows=7085087 loops=1)               ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..3.07 rows=1 width=56) (actual time=0.002..0.002 rows=1 loops=7085087)                     Index Cond: (ogc_fid = j.edge) Planning Time: 36.572 ms Execution Time: 426489.553 ms\",\"Sort  (cost=8577.04..8579.54 rows=1000 width=64) (actual time=768.985..769.519 rows=5303 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 648kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_10_origin  (cost=0.00..1.10 rows=10 width=8) (actual time=0.018..0.021 rows=10 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_10_destination  (cost=0.00..1.10 rows=10 width=8) (actual time=0.006..0.008 rows=10 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=757.833..767.810 rows=5303 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=757.819..759.974 rows=18682 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: quicksort  Memory: 2223kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=744.178..751.771 rows=18682 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=676.878..678.130 rows=18682 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=67.183..67.184 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.017..29.060 rows=175608 loops=1) Planning Time: 0.357 ms Execution Time: 770.139 ms\",\"Sort  (cost=8577.84..8580.34 rows=1000 width=64) (actual time=4359.528..4361.735 rows=15882 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 1749kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_50_origin  (cost=0.00..1.50 rows=50 width=8) (actual time=0.509..0.534 rows=50 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_50_destination  (cost=0.00..1.50 rows=50 width=8) (actual time=0.271..0.298 rows=50 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=4161.448..4356.037 rows=15882 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=4161.408..4259.997 rows=434594 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 26672kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=3735.785..3921.312 rows=434594 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=3661.874..3711.643 rows=434594 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=73.748..73.749 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.012..32.118 rows=175608 loops=1) Planning Time: 0.790 ms Execution Time: 4390.494 ms\",\"Sort  (cost=8578.84..8581.34 rows=1000 width=64) (actual time=12244.543..12247.630 rows=21673 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2631kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.014..0.032 rows=100 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.315..0.340 rows=100 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=11383.791..12239.087 rows=21673 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=11383.658..11871.002 rows=1787766 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 109736kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=9526.664..10370.857 rows=1787766 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=9457.479..9678.252 rows=1787766 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=69.052..69.053 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.013..29.050 rows=175608 loops=1) Planning Time: 0.373 ms Execution Time: 12319.547 ms\",\"Sort  (cost=8582.84..8585.34 rows=1000 width=64) (actual time=38249.748..38254.173 rows=28983 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3259kB   InitPlan 1 (returns $0)     ->  Seq Scan on sampling_weight_200_origin  (cost=0.00..4.00 rows=200 width=8) (actual time=0.021..0.099 rows=200 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on sampling_weight_200_destination  (cost=0.00..4.00 rows=200 width=8) (actual time=0.018..0.095 rows=200 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=34639.396..38240.873 rows=28983 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=34638.821..36809.853 rows=7071064 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 434032kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=27677.391..30834.830 rows=7071064 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=27609.426..28439.714 rows=7071064 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=67.825..67.825 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.013..28.690 rows=175608 loops=1) Planning Time: 0.591 ms Execution Time: 38444.056 ms\",\"Sort  (cost=8586.84..8589.34 rows=1000 width=64) (actual time=88849.452..88854.504 rows=32000 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3518kB   InitPlan 1 (returns $0)     ->  Seq Scan on sampling_weight_300_origin  (cost=0.00..6.00 rows=300 width=8) (actual time=0.319..0.559 rows=300 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on sampling_weight_300_destination  (cost=0.00..6.00 rows=300 width=8) (actual time=0.247..0.453 rows=300 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=81044.287..88828.764 rows=32000 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=81042.282..84664.286 rows=15922899 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 977136kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=59212.329..66886.522 rows=15922899 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=59108.049..61133.560 rows=15922899 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=103.949..103.950 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.014..46.570 rows=175608 loops=1) Planning Time: 6.017 ms Execution Time: 89211.976 ms\",\"Sort  (cost=8577.04..8579.54 rows=1000 width=64) (actual time=1657.330..1657.914 rows=5193 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 639kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_10_origin  (cost=0.00..1.10 rows=10 width=8) (actual time=0.013..0.017 rows=10 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_10_destination  (cost=0.00..1.10 rows=10 width=8) (actual time=0.006..0.011 rows=10 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=1646.475..1656.284 rows=5193 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=1646.457..1648.758 rows=18776 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: quicksort  Memory: 2230kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=1625.290..1637.499 rows=18776 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_bdastar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=1542.172..1543.932 rows=18776 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=82.998..82.999 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.016..36.264 rows=175608 loops=1) Planning Time: 0.183 ms Execution Time: 1667.918 ms\",\"Sort  (cost=8577.84..8580.34 rows=1000 width=64) (actual time=27898.701..27900.875 rows=16075 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 1766kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_50_origin  (cost=0.00..1.50 rows=50 width=8) (actual time=0.011..0.020 rows=50 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_50_destination  (cost=0.00..1.50 rows=50 width=8) (actual time=0.005..0.013 rows=50 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=27701.769..27895.244 rows=16075 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=27701.732..27800.722 rows=435429 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 26720kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=27225.949..27439.013 rows=435429 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_bdastar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=27154.302..27208.107 rows=435429 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=71.515..71.516 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.013..30.185 rows=175608 loops=1) Planning Time: 0.230 ms Execution Time: 27935.192 ms\",\"Sort  (cost=8578.84..8581.34 rows=1000 width=64) (actual time=110353.698..110356.793 rows=22053 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2664kB   InitPlan 1 (returns $0)     ->  Seq Scan on random_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.015..0.032 rows=100 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on random_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.011..0.028 rows=100 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=109525.205..110348.564 rows=22053 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=109525.026..109992.182 rows=1791492 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 109968kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=107588.397..108480.273 rows=1791492 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_bdastar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=107508.414..107738.728 rows=1791492 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=79.853..79.854 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.013..34.527 rows=175608 loops=1) Planning Time: 0.387 ms Execution Time: 110424.801 ms\",\"Sort  (cost=8582.84..8585.34 rows=1000 width=64) (actual time=430749.390..430754.215 rows=29645 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 3316kB   InitPlan 1 (returns $0)     ->  Seq Scan on sampling_weight_200_origin  (cost=0.00..4.00 rows=200 width=8) (actual time=0.013..0.051 rows=200 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on sampling_weight_200_destination  (cost=0.00..4.00 rows=200 width=8) (actual time=0.008..0.268 rows=200 loops=1)   ->  GroupAggregate  (cost=8505.01..8525.01 rows=1000 width=64) (actual time=427198.758..430740.610 rows=29645 loops=1)         Group Key: b.ogc_fid, b.the_geom         ->  Sort  (cost=8505.01..8507.51 rows=1000 width=56) (actual time=427198.229..429342.776 rows=7075521 loops=1)               Sort Key: b.ogc_fid, b.the_geom               Sort Method: external merge  Disk: 434304kB               ->  Hash Left Join  (cost=8431.43..8455.18 rows=1000 width=56) (actual time=420326.169..423368.515 rows=7075521 loops=1)                     Hash Cond: (j.edge = b.ogc_fid)                     ->  Function Scan on pgr_bdastar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=420251.562..421080.272 rows=7075521 loops=1)                     ->  Hash  (cost=6236.08..6236.08 rows=175608 width=56) (actual time=74.446..74.447 rows=175608 loops=1)                           Buckets: 262144  Batches: 1  Memory Usage: 16625kB                           ->  Seq Scan on porto_alegre_net_largest_astar b  (cost=0.00..6236.08 rows=175608 width=56) (actual time=0.017..31.956 rows=175608 loops=1) Planning Time: 0.440 ms Execution Time: 430940.623 ms\",\"Sort  (cost=5853.41..5855.91 rows=1000 width=64) (actual time=13879.157..13881.921 rows=21751 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2978kB   InitPlan 1 (returns $0)     ->  Seq Scan on weight_sampling_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.016..0.035 rows=100 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on weight_sampling_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.009..0.027 rows=100 loops=1)   ->  GroupAggregate  (cost=5779.58..5799.58 rows=1000 width=64) (actual time=12635.510..13871.369 rows=21751 loops=1)         Group Key: b.id, b.the_geom         ->  Sort  (cost=5779.58..5782.08 rows=1000 width=56) (actual time=12635.239..13241.978 rows=1715329 loops=1)               Sort Key: b.id, b.the_geom               Sort Method: external merge  Disk: 105256kB               ->  Nested Loop Left Join  (cost=0.67..5729.75 rows=1000 width=56) (actual time=5574.168..11329.659 rows=1715329 loops=1)                     ->  Function Scan on pgr_dijkstra  (cost=0.25..10.25 rows=1000 width=8) (actual time=5574.117..5967.621 rows=1715329 loops=1)                     ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..5.71 rows=1 width=56) (actual time=0.002..0.003 rows=1 loops=1715329)                           Index Cond: (id = pgr_dijkstra.edge) Planning Time: 0.369 ms Execution Time: 13944.047 ms\",\"Sort  (cost=5853.41..5855.91 rows=1000 width=64) (actual time=14153.807..14156.225 rows=21751 loops=1)   Sort Key: (count(b.the_geom)) DESC   Sort Method: quicksort  Memory: 2978kB   InitPlan 1 (returns $0)     ->  Seq Scan on weight_sampling_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.015..0.036 rows=100 loops=1)   InitPlan 2 (returns $1)     ->  Seq Scan on weight_sampling_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.009..0.027 rows=100 loops=1)   ->  GroupAggregate  (cost=5779.58..5799.58 rows=1000 width=64) (actual time=12845.086..14146.026 rows=21751 loops=1)         Group Key: b.id, b.the_geom         ->  Sort  (cost=5779.58..5782.08 rows=1000 width=56) (actual time=12844.844..13481.742 rows=1715329 loops=1)               Sort Key: b.id, b.the_geom               Sort Method: external merge  Disk: 105256kB               ->  Nested Loop Left Join  (cost=0.67..5729.75 rows=1000 width=56) (actual time=5577.430..11504.201 rows=1715329 loops=1)                     ->  Function Scan on pgr_dijkstra j  (cost=0.25..10.25 rows=1000 width=8) (actual time=5577.380..5983.338 rows=1715329 loops=1)                     ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..5.71 rows=1 width=56) (actual time=0.002..0.003 rows=1 loops=1715329)                           Index Cond: (id = j.edge) Planning Time: 0.373 ms Execution Time: 14212.059 ms\",\"Sort  (cost=5857.41..5859.91 rows=1000 width=64) (actual time=63826.778..63830.453 rows=28899 loops=1)    Sort Key: (count(b.the_geom)) DESC    Sort Method: quicksort  Memory: 3704kB    InitPlan 1 (returns $0)      ->  Limit  (cost=0.00..4.00 rows=200 width=8) (actual time=0.027..0.083 rows=200 loops=1)            ->  Seq Scan on weight_sampling_1000_origin  (cost=0.00..20.00 rows=1000 width=8) (actual time=0.026..0.059 rows=200 loops=1)    InitPlan 2 (returns $1)      ->  Limit  (cost=0.00..4.00 rows=200 width=8) (actual time=0.011..0.071 rows=200 loops=1)            ->  Seq Scan on weight_sampling_1000_destination  (cost=0.00..20.00 rows=1000 width=8) (actual time=0.011..0.041 rows=200 loops=1)    ->  GroupAggregate  (cost=5779.58..5799.58 rows=1000 width=64) (actual time=58275.084..63807.180 rows=28899 loops=1)          Group Key: b.id, b.the_geom          ->  Sort  (cost=5779.58..5782.08 rows=1000 width=56) (actual time=58273.950..61033.906 rows=7164864 loops=1)                Sort Key: b.id, b.the_geom                Sort Method: external merge  Disk: 439832kB                ->  Nested Loop Left Join  (cost=0.67..5729.75 rows=1000 width=56) (actual time=27044.588..52006.123 rows=7164864 loops=1)                      ->  Function Scan on pgr_dijkstra  (cost=0.25..10.25 rows=1000 width=8) (actual time=27041.142..28746.873 rows=7164864 loops=1)                      ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..5.71 rows=1 width=56) (actual time=0.002..0.003 rows=1 loops=7164864)                            Index Cond: (id = pgr_dijkstra.edge)  Planning Time: 44.085 ms  Execution Time: 64398.838 ms\",\"Sort  (cost=5861.41..5863.91 rows=1000 width=64) (actual time=135694.339..135698.346 rows=33522 loops=1)    Sort Key: (count(b.the_geom)) DESC    Sort Method: quicksort  Memory: 4941kB    InitPlan 1 (returns $0)      ->  Limit  (cost=0.00..6.00 rows=300 width=8) (actual time=0.018..0.141 rows=300 loops=1)            ->  Seq Scan on weight_sampling_1000_origin  (cost=0.00..20.00 rows=1000 width=8) (actual time=0.017..0.099 rows=300 loops=1)    InitPlan 2 (returns $1)      ->  Limit  (cost=0.00..6.00 rows=300 width=8) (actual time=0.011..0.149 rows=300 loops=1)            ->  Seq Scan on weight_sampling_1000_destination  (cost=0.00..20.00 rows=1000 width=8) (actual time=0.011..0.089 rows=300 loops=1)    ->  GroupAggregate  (cost=5779.58..5799.58 rows=1000 width=64) (actual time=126249.948..135676.451 rows=33522 loops=1)          Group Key: b.id, b.the_geom          ->  Sort  (cost=5779.58..5782.08 rows=1000 width=56) (actual time=126249.771..129678.700 rows=15830824 loops=1)                Sort Key: b.id, b.the_geom                Sort Method: external merge  Disk: 971528kB                ->  Nested Loop Left Join  (cost=0.67..5729.75 rows=1000 width=56) (actual time=51602.523..107427.600 rows=15830824 loops=1)                      ->  Function Scan on pgr_dijkstra  (cost=0.25..10.25 rows=1000 width=8) (actual time=51588.317..55402.349 rows=15830824 loops=1)                      ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..5.71 rows=1 width=56) (actual time=0.002..0.003 rows=1 loops=15830824)                            Index Cond: (id = pgr_dijkstra.edge)  Planning Time: 0.628 ms  Execution Time: 136039.719 ms\",\"Sort  (cost=8570.84..8573.34 rows=1000 width=64) (actual time=24093.130..24095.704 rows=21751 loops=1)    Sort Key: (count(b.the_geom)) DESC    Sort Method: quicksort  Memory: 2978kB    InitPlan 1 (returns $0)      ->  Seq Scan on weight_sampling_100_origin  (cost=0.00..2.00 rows=100 width=8) (actual time=0.012..0.030 rows=100 loops=1)    InitPlan 2 (returns $1)      ->  Seq Scan on weight_sampling_100_destination  (cost=0.00..2.00 rows=100 width=8) (actual time=0.006..0.019 rows=100 loops=1)    ->  GroupAggregate  (cost=8497.01..8517.01 rows=1000 width=64) (actual time=22839.127..24084.982 rows=21751 loops=1)          Group Key: b.id, b.the_geom          ->  Sort  (cost=8497.01..8499.51 rows=1000 width=56) (actual time=22838.909..23429.447 rows=1715329 loops=1)                Sort Key: b.id, b.the_geom                Sort Method: external merge  Disk: 105256kB                ->  Hash Left Join  (cost=8423.43..8447.18 rows=1000 width=56) (actual time=20638.842..21726.466 rows=1715329 loops=1)                      Hash Cond: (j.edge = b.id)                      ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=20487.083..20771.571 rows=1715329 loops=1)                      ->  Hash  (cost=6228.08..6228.08 rows=175608 width=56) (actual time=148.187..148.188 rows=175608 loops=1)                            Buckets: 262144  Batches: 1  Memory Usage: 16625kB                            ->  Seq Scan on porto_alegre_net_pre_component_one_star b  (cost=0.00..6228.08 rows=175608 width=56) (actual time=0.020..35.415 rows=175608 loops=1)  Planning Time: 1.883 ms  Execution Time: 24171.228 ms (20 rows)\",\"Sort  (cost=8574.84..8577.34 rows=1000 width=64) (actual time=81989.150..81992.535 rows=28899 loops=1)    Sort Key: (count(b.the_geom)) DESC    Sort Method: quicksort  Memory: 3704kB    InitPlan 1 (returns $0)      ->  Seq Scan on weight_sampling_200_origin  (cost=0.00..4.00 rows=200 width=8) (actual time=0.024..0.067 rows=200 loops=1)    InitPlan 2 (returns $1)      ->  Seq Scan on weight_sampling_200_destination  (cost=0.00..4.00 rows=200 width=8) (actual time=0.011..0.056 rows=200 loops=1)    ->  GroupAggregate  (cost=8497.01..8517.01 rows=1000 width=64) (actual time=76649.207..81977.295 rows=28899 loops=1)          Group Key: b.id, b.the_geom          ->  Sort  (cost=8497.01..8499.51 rows=1000 width=56) (actual time=76648.068..79299.686 rows=7164864 loops=1)                Sort Key: b.id, b.the_geom                Sort Method: external merge  Disk: 439832kB                ->  Hash Left Join  (cost=8423.43..8447.18 rows=1000 width=56) (actual time=67254.608..71881.777 rows=7164864 loops=1)                      Hash Cond: (j.edge = b.id)                      ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=67046.094..68268.355 rows=7164864 loops=1)                      ->  Hash  (cost=6228.08..6228.08 rows=175608 width=56) (actual time=204.118..204.119 rows=175608 loops=1)                            Buckets: 262144  Batches: 1  Memory Usage: 16625kB                            ->  Seq Scan on porto_alegre_net_pre_component_one_star b  (cost=0.00..6228.08 rows=175608 width=56) (actual time=0.025..37.872 rows=175608 loops=1)  Planning Time: 0.462 ms  Execution Time: 82160.566 ms\",\"Sort  (cost=8578.84..8581.34 rows=1000 width=64) (actual time=183352.587..183356.553 rows=33522 loops=1)    Sort Key: (count(b.the_geom)) DESC    Sort Method: quicksort  Memory: 4941kB    InitPlan 1 (returns $0)      ->  Seq Scan on weight_sampling_300_origin  (cost=0.00..6.00 rows=300 width=8) (actual time=0.014..0.082 rows=300 loops=1)    InitPlan 2 (returns $1)      ->  Seq Scan on weight_sampling_300_destination  (cost=0.00..6.00 rows=300 width=8) (actual time=0.011..0.073 rows=300 loops=1)    ->  GroupAggregate  (cost=8497.01..8517.01 rows=1000 width=64) (actual time=173839.833..183338.953 rows=33522 loops=1)          Group Key: b.id, b.the_geom          ->  Sort  (cost=8497.01..8499.51 rows=1000 width=56) (actual time=173839.644..177292.441 rows=15830824 loops=1)                Sort Key: b.id, b.the_geom                Sort Method: external merge  Disk: 971528kB                ->  Hash Left Join  (cost=8423.43..8447.18 rows=1000 width=56) (actual time=147905.132..157970.745 rows=15830824 loops=1)                      Hash Cond: (j.edge = b.id)                      ->  Function Scan on pgr_astar j  (cost=0.25..10.25 rows=1000 width=8) (actual time=147677.519..150340.268 rows=15830824 loops=1)                      ->  Hash  (cost=6228.08..6228.08 rows=175608 width=56) (actual time=224.092..224.093 rows=175608 loops=1)                            Buckets: 262144  Batches: 1  Memory Usage: 16625kB                            ->  Seq Scan on porto_alegre_net_pre_component_one_star b  (cost=0.00..6228.08 rows=175608 width=56) (actual time=0.021..35.861 rows=175608 loops=1)  Planning Time: 0.541 ms  Execution Time: 183715.600 ms\",\"Sort  (cost=6761.23..6763.73 rows=1000 width=64) (actual time=79059.388..79063.123 rows=28899 loops=1)    Sort Key: (count(b.the_geom)) DESC    Sort Method: quicksort  Memory: 3704kB    CTE pgr_result      ->  ProjectSet  (cost=896.81..902.07 rows=1000 width=32) (actual time=21592.976..30680.043 rows=7164864 loops=1)            ->  Aggregate  (cost=896.81..896.82 rows=1 width=64) (actual time=18.337..18.340 rows=1 loops=1)                  ->  Seq Scan on vertices_lookup_200  (cost=0.00..696.20 rows=40120 width=16) (actual time=0.025..6.971 rows=40000 loops=1)    ->  GroupAggregate  (cost=5789.33..5809.33 rows=1000 width=64) (actual time=71984.918..79045.788 rows=28899 loops=1)          Group Key: b.the_geom, b.id          ->  Sort  (cost=5789.33..5791.83 rows=1000 width=56) (actual time=71984.284..76384.564 rows=7164864 loops=1)                Sort Key: b.the_geom, b.id                Sort Method: external merge  Disk: 439832kB                ->  Nested Loop Left Join  (cost=0.42..5739.50 rows=1000 width=56) (actual time=21595.854..62964.164 rows=7164864 loops=1)                      ->  CTE Scan on pgr_result  (cost=0.00..20.00 rows=1000 width=32) (actual time=21592.990..34613.381 rows=7164864 loops=1)                      ->  Index Scan using idx_porto_alegre_net_largest_id on porto_alegre_net_largest b  (cost=0.42..5.71 rows=1 width=56) (actual time=0.003..0.003 rows=1 loops=7164864)                            Index Cond: (id = (pgr_result.pgr_dijkstra).edge)  Planning Time: 1.337 ms  Execution Time: 79274.083 ms (18 rows)\"]],\"container\":\"<table class=\\\"compact\\\">\\n  <thead>\\n    <tr>\\n      <th>number_od<\\/th>\\n      <th>algorithm<\\/th>\\n      <th>time<\\/th>\\n      <th>query<\\/th>\\n      <th>analyze<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"order\":[[0,\"asc\"],[2,\"asc\"]],\"rowGroup\":{\"dataSrc\":0},\"dom\":\"Bfrtip\",\"columnDefs\":[{\"visible\":false,\"targets\":[3,4]},{\"className\":\"dt-right\",\"targets\":[0,2]},{\"name\":\"number_od\",\"targets\":0},{\"name\":\"algorithm\",\"targets\":1},{\"name\":\"time\",\"targets\":2},{\"name\":\"query\",\"targets\":3},{\"name\":\"analyze\",\"targets\":4}],\"buttons\":[\"copy\",\"csv\",\"pdf\"],\"initComplete\":\"function(settings, json) {\\n$(this.api().table().header()).css({'background-color': '#d50038', 'color': '#fff'});\\n}\",\"autoWidth\":false,\"orderClasses\":false,\"rowCallback\":\"function(row, data, displayNum, displayIndex, dataIndex) {\\nvar value=data[2]; $(this.api().cell(row, 2).node()).css({'background':isNaN(parseFloat(value)) || value <= 620.371000 ? '' : 'linear-gradient(90.000000deg, transparent ' + Math.max(430940.623000 - value, 0)/430320.252000 * 100 + '%, #ee8b8b ' + Math.max(430940.623000 - value, 0)/430320.252000 * 100 + '%)','background-size':'98% 88%','background-repeat':'no-repeat','background-position':'center'});\\n}\"}},\"evals\":[\"options.initComplete\",\"options.rowCallback\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Method\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(df, method %in% c('st_bbox','naive') & algorithm == 'pgr_astrar()' & number_od >=100),aes(x=number_od, y=time, group = method)) +\n  labs(x=\"Number of Origin-Destination (OD)\",\n       y=\"time (ms)\",\n       title=\"PostgreSQL's queries performance\") +\n  geom_line(aes(color=method)) +\n   geom_point(aes(color=method)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](appendix_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### Naive\n\nCentrality based on\n1. [Blog from Daniel I. Patterson](https://urbandatacyclist.com/2020/04/18/how-to-measure-centrality-among-bike-share-trips-using-pgrouting/)\n2. [Book by Matt Forrest \"Listing 3.26: Final query\",page 435](https://locatepress.com/book/spatial-sql)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n--- Run query\nEXPLAIN ANALYZE\n CREATE TABLE centrality_200_200_porto AS\n SELECT   b.ogc_fid,\n b.the_geom,\n count(the_geom) as centrality \n FROM  pgr_dijkstra('SELECT  ogc_fid AS id,\n\t\t\t\t\t\t\t  fromid AS source,\n\t\t\t\t\t\t\ttoid AS target,\n\t\t\t\t\t\t\tweight AS cost\n\t\t\t\t      FROM porto_alegre_net_largest',\n\t\t\t\t      ARRAY(SELECT net_id AS start_id FROM porto_200_origin  ),\n\t\t\t\t      ARRAY(SELECT net_id AS end_id FROM porto_200_destination ),\n\t\t\t\t      directed := TRUE) j\n\t\t\t\t      LEFT JOIN porto_alegre_net_largest AS b\n\t\t\t\t      ON j.edge = b.ogc_fid\n\t\t\t\t      GROUP BY  b.ogc_fid, b.the_geom\n\t\t\t\t      ORDER BY centrality DESC;  \n```\n:::\n\n\n### Method bounding box\n\nCode based on:\n1. [Stackoverflow from \"simpleuser001\" ](https://gis.stackexchange.com/questions/69722/why-is-any-pgr-routing-function-taking-forever-based-on-osm-data-in-an-pgrouti/69825#69825)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nEXPLAIN ANALYZE \nCREATE TABLE centrality_200_200_porto_astrar_bbox AS \nSELECT    \n\tb.id,\n\tb.the_geom,\n\tcount(the_geom) as centrality\nFROM \n\tpgr_astar(  \n\t\t'SELECT id,\n\t\t\t    source,\n\t\t\t    target,\n\t\t\t    cost,\n\t\t\t    x1,\n\t\t\t    y1,\n\t\t\t    x2,\n\t\t\t    y2  \n\t\t\tFROM \n\t\t\t\tporto_alegre_net_pre_component_one_star\n\t\t\tWHERE the_geom && (SELECT box FROM bbox)',\n\t\t\t ARRAY(SELECT net_id FROM weight_sampling_200_origin),\n\t\t\t ARRAY(SELECT net_id FROM weight_sampling_200_destination),\n\t\t\tdirected:=TRUE,\n\t\t\theuristic:=2) j\n\t\t\tLEFT JOIN \n\t\t\t\tporto_alegre_net_pre_component_one_star AS b\n\t\t\tON \n\t\t\t\tj.edge = b.id\n\t\t\tGROUP BY  \n\t\t\t\tb.id,\n\t\t\t\tb.the_geom\n\t\t\tORDER BY \n\t\t\t\tcentrality DESC;   \n\n```\n:::\n\n\n### Method array_agg()\n\nCode based on:\n1. [Stackoverflow from \"Timothy Dalton\"](https://gis.stackexchange.com/questions/432035/pgrouting-computation-time-code-efficiency)\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n---- Run query using array_agg()\nEXPLAIN ANALYZE\nCREATE TABLE porto_100_dijkstra_agg AS\nWITH pgr_result AS (\n  SELECT pgr_dijkstra('SELECT ogc_fid AS id,\n\t         fromid AS source,\n\t\t\ttoid AS target,\n\t\t\t weight AS cost FROM porto_alegre_net_largest',\n    array_agg(fv), array_agg(tv), \n    directed := true\n  ) FROM vertices_lookup_10 \n) \nSELECT \n b.ogc_fid,\n b.the_geom,\n count(the_geom) as centrality \nFROM pgr_result\nLEFT JOIN porto_alegre_net_largest AS b\nON (pgr_dijkstra).edge = b.ogc_fid\nGROUP BY \n\tthe_geom, b.ogc_fid\nORDER BY \n\tcentrality DESC;\n---- Max centrality value\nselect max(centrality) FROM porto_100_dijkstra_agg ;\n---- Number of rows\nselect count(*) FROM porto_100_dijkstra_agg ;\n```\n:::\n\n\n## Algorithm\n\n### pgr_dijkstra\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df,aes(x=number_od, y=time, group = algorithm)) +\n  labs(x=\"Number of Origin-Destination (OD)\",\n       y=\"time (ms)\",\n       title=\"PostgreSQL's queries performance\") +\n  geom_line(aes(color=algorithm)) +\n   geom_point(aes(color=algorithm)) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](appendix_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### pgr_astrar()\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nEXPLAIN ANALYZE\nCREATE TABLE centrality_10_10_porto_astrar AS\nSELECT  \n\tb.ogc_fid,\n\t b.the_geom,\n \tcount(the_geom) as centrality \nFROM pgr_astar(\n\t'SELECT ogc_fid AS id,\n\t\t\tfromid AS source,\n\t\t\ttoid AS target,\n\t\t\tweight AS cost,\n\t\t\tx1,\n\t\t\ty1,\n\t\t\tx2,\n\t\t\ty2\n\tFROM porto_alegre_net_largest_astar',\n\tARRAY(SELECT net_id FROM  random_10_origin),\n\tARRAY(SELECT net_id FROM  random_10_destination),\n\t\t     directed:=TRUE,\n\t\t     heuristic:=2) j\n                      left JOIN porto_alegre_net_largest_astar AS b\n                      ON j.edge = b.ogc_fid\n                      GROUP BY  b.ogc_fid, b.the_geom\n                      ORDER BY centrality DESC;  \n\n--- check max centrality                     \nSELECT max(centrality) FROM centrality_10_10_porto_astrar ;\n--- check max rows\nSELECT  count(*) FROM centrality_10_10_porto_astrar;\n```\n:::\n\n\n### pgr_bdijkstra\n\n::: {.cell}\n\n```{.sql .cell-code}\n\n```\n:::\n\n\n\n### pgr_bdastar()\n\n::: {.cell}\n\n```{.sql .cell-code}\nEXPLAIN ANALYZE\nCREATE TABLE centrality_100_100_porto_bdastrar AS \nSELECT    b.ogc_fid,\n          b.the_geom,\n          count(the_geom) as centrality\nFROM \n  pgr_bdAstar(\n      'SELECT\n          ogc_fid AS id,\n          fromid AS source,\n          toid AS target,\n          weight AS cost,\n          x1,\n          y1,\n          x2,\n          y2  \n  FROM\n    porto_alegre_net_largest_astar',\n    ARRAY(SELECT net_id FROM  random_100_origin),\n    ARRAY(SELECT net_id FROM  random_100_destination),\n    directed:=TRUE,\n    heuristic:=2) j\n    LEFT JOIN \n      porto_alegre_net_largest_astar AS b\n      ON j.edge = b.ogc_fid\n      GROUP BY  b.ogc_fid, b.the_geom\n      ORDER BY centrality DESC;  \n```\n:::\n\n\n### Other code \n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE od_40420_snapped_origin AS\nSELECT DISTINCT ON (net.id)\n       pt.id AS pt_id,\n       net.id AS net_id,\n       net.the_geom\nFROM \n(select * \nFROM \n    od_77763 as pt) as pt\nCROSS JOIN\nLATERAL (SELECT\n        * \n        FROM porto_alegre_net_largest_vertices_pgr AS net\n         ORDER BY net.the_geom <-> pt.geometry \n        LIMIT 1) AS net;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE random_272_destination  AS\nwith random_272_destination AS (\n        SELECT\n            * \n        FROM \n            od_40420_snapped_origin \n        ORDER BY random() LIMIT 200)\n        SELECT * FROM  random_272_destination;  \n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TEMP TABLE vertices_lookup_v5 \nAS             \nWITH all_pairs AS (\n  SELECT f.net_id AS fid, f.the_geom as fgeom,\n         t.net_id AS tid, t.the_geom as tgeom\n    FROM random_272_origin AS f,\n         random_272_destination AS t\n),\nvertices AS (\n  SELECT fid, tid,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> fgeom\n       LIMIT 1) as fv,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> tgeom\n       LIMIT 1) as tv\n  FROM all_pairs\n)\nSELECT * FROM vertices;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE porto_272_272_dijkstra AS\n WITH pgr_result AS (\n   SELECT pgr_dijkstra('SELECT id,\n           source,\n    target,\n     cost FROM porto_alegre_net_largest',\n     array_agg(fv), array_agg(tv), \n     directed := true\n   ) FROM vertices_lookup_v5\n )\nSELECT (pgr_dijkstra).*, a.fid, a.tid FROM pgr_result\nJOIN vertices_lookup_v5 a\nON (pgr_dijkstra).start_vid = a.fv\nAND (pgr_dijkstra).end_vid = a.tv;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TEMP TABLE vertices_lookup_v5                     \nAS             \nWITH all_pairs AS (\n  SELECT f.net_id AS fid, f.the_geom as fgeom,\n         t.net_id AS tid, t.the_geom as tgeom\n    FROM random_272_origin AS f,                                                                      \n         random_272_destination AS t               \n),                                                                                     \nvertices AS (\n  SELECT fid, tid,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> fgeom\n       LIMIT 1) as fv,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> tgeom\n       LIMIT 1) as tv\n  FROM all_pairs\n)\nSELECT * FROM vertices;\n\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\n\nCREATE TEMP TABLE vertices_lookup_v5                     \nAS             \nWITH all_pairs AS (\n  SELECT f.net_id AS fid, f.the_geom as fgeom,\n         t.net_id AS tid, t.the_geom as tgeom\n    FROM random_272_origin AS f,                                                                      \n         random_272_destination AS t               \n),                                                                                     \nvertices AS (\n  SELECT fid, tid,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> fgeom\n       LIMIT 1) as fv,\n     (SELECT id\n        FROM porto_alegre_net_largest_vertices_pgr AS way\n       ORDER BY way.the_geom <-> tgeom\n       LIMIT 1) as tv\n  FROM all_pairs\n)\nSELECT * FROM vertices;\n\n```\n:::",
    "supporting": [
      "appendix_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<script src=\"site_libs/pdfmake-1.13.6/pdfmake.js\"></script>\n<script src=\"site_libs/pdfmake-1.13.6/vfs_fonts.js\"></script>\n<link href=\"site_libs/dt-ext-buttons-1.13.6/css/buttons.dataTables.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-ext-buttons-1.13.6/js/dataTables.buttons.min.js\"></script>\n<script src=\"site_libs/dt-ext-buttons-1.13.6/js/buttons.html5.min.js\"></script>\n<script src=\"site_libs/dt-ext-buttons-1.13.6/js/buttons.colVis.min.js\"></script>\n<script src=\"site_libs/dt-ext-buttons-1.13.6/js/buttons.print.min.js\"></script>\n<link href=\"site_libs/dt-ext-rowgroup-1.13.6/css/rowGroup.dataTables.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-ext-rowgroup-1.13.6/js/dataTables.rowGroup.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}